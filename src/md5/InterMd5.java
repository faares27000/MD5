
package md5;

import java.io.UnsupportedEncodingException;
import static java.lang.Math.pow;
import static java.lang.StrictMath.abs;
import static java.lang.StrictMath.floor;
import java.util.LinkedList;
import java.util.Scanner;
/**
 *
 * @author Fares
 */
public class InterMd5 extends javax.swing.JFrame {

    /**
     * Creates new form InterMd5
     */
    public InterMd5() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        Message = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        Crypt = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(Message);

        jScrollPane2.setViewportView(Crypt);

        jButton1.setText("Encrypt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Saisir votre message");

        jLabel2.setText("Voici votre message crypt√©");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel2))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton1)
                .addGap(38, 38, 38)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(95, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int[] s = new int[64];
        int[] a0 = new int[32];
        int[] b0 = new int[32];
        int[] c0 = new int[32];
        int[] d0 = new int[32];
        int[] A = new int[32];
        int[] B = new int[32];
        int[] C = new int[32];
        int[] D = new int[32];
        String[] A_final = new String[32];
        String[] B_final = new String[32];
        String[] C_final = new String[32];
        String[] D_final = new String[32];
        int[] t = new int[64];
        int[] T = new int[32];
        int[] m = new int[512];
       
        s = new int[] {7,12,17,22,7,12,17,22,7,12,17,22,7,12,17,22,5,9,14,20,5,9,14,20,5,9,14,20,5,9,14,20,4,11,16,23,4,11,16,23,4,11,16,23,4,11,16,23,6,10,15,21,6,10,15,21,6,10,15,21,6,10,15,21};

        for (int i=0; i<64; i++) {
            t[i] = (int) floor(abs((Math.sin(Math.toRadians(i+1))) * pow(2,32)));
        }

        a0 = new int[] {0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1};  
        b0 = new int[] {1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,1,1,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1};  
        c0 = new int[] {1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0};  
        d0 = new int[] {0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,1,1,0,1,1,0};  
        A = new int[] {0,1,1,0,0,1,1,1,0,1,0,0,0,1,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1};  
        B = new int[] {1,1,1,0,1,1,1,1,1,1,0,0,1,1,0,1,1,0,1,0,1,0,1,1,1,0,0,0,1,0,0,1};  
        C = new int[] {1,0,0,1,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0};  
        D = new int[] {0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,1,1,0,1,1,0};  

        for (int i=0, in=1; i<448; i++) {
            if(in != 0) {
                m[i] = 1;
                in = 0;
            }else {
                m[i] = 0;
            }
        }
       // Scanner sc = new Scanner(System.in);
        
        //System.out.println("Please input the message that you would like to encrypt:");
        String str = Message.getText();
        
        
        LinkedList binarylist = new LinkedList();

            for( int i=0; i<str.length(); i++) {
                char ch = str.charAt(i);
                int strdecimal = Character.getNumericValue(ch);
                String strBinaryNumber = Integer.toBinaryString(strdecimal);
                
                for (int j=0; j<strBinaryNumber.length(); j++) {
                    char strBineryParse = strBinaryNumber.charAt(j);
                    binarylist.add(Character.getNumericValue(strBineryParse)); 
                }
            }
            
            int length = binarylist.size();
            int rest = 64-length;
            
            for (int x=448; x<rest+448; x++)
                m[x] = 0;
            
            for (int x=rest+448; x<512; x++) {
                if(! binarylist.isEmpty())
                    m[x] = (int) binarylist.removeFirst();    
            }
            
            int[] F = new int[32];
            int[] G = new int[32];
            int[] H = new int[32];
            int[] I = new int[32];
            int[] Result = new int[32];
            int[] B1 = new int[32];
            
            for (int rond=0,p=0,q=0; rond<4; rond++) {
                int u=0;
                
                if (rond == 0) {
                for(int iteration=0; iteration<16; iteration++) {
                    
                    for (int i=0; i<3; i++) {
                        
                        F[i] = (B[i] & C[i]);
                
                        if (B[i] == 0)
                            B1[i] = 1;
                        else
                            B1[i] = 0;
                        
                        Result[i] = F[i] | (B1[i] & D[i]);
                        Result[i] = Result[i] ^ A[i];  
                    }
                    
                    for (int i=0; i<32; i++,u++) {// Xor avec le message
                        
                        Result[i] = (Result[i] ^ m[u]);
                    }
                    
                    for (int l=31; l>=0; l--) {//Convertir en binat T[]
                        
                        if(t[p] > 0) {
                        
                            int residue = t[p] % 2;
                            t[p] = t[p] / 2;
                            T[l] = residue;
                            }
                        Result[l] = Result[l] ^ T[l];
                    }
                    p++;
                    for (int i=0,last=31; i<s[q]; i++,last--) {//Permutation <<< S
                        
                        int permut = Result[last];
                        Result[last] = Result[i];
                        Result[i] = permut;
                    }
                    q++;
                    for (int i=0; i<32; i++) {
                        Result[i] = Result[i] ^ B[i];
                    }
                    for (int ini=0; ini<32; ini++) {// initialisation A,B,C,D
                        A[ini] = D[ini];
                        //System.out.println("A " + A[ini]);
                        D[ini] = C[ini];
                        //System.out.println("D " + D[ini]);
                        C[ini] = B[ini];
                        //System.out.println("C " + C[ini]);
                        B[ini] = Result[ini];
                        //System.out.println("B " + B[ini]);
                    }
                }
                }
                if (rond == 1) {
                for(int iteration=0; iteration<16; iteration++) {
                    
                    for (int i=0; i<3; i++) {
                        
                        F[i] = (B[i] & D[i]);
                
                        if (D[i] == 0)
                            B1[i] = 1;
                        else
                            B1[i] = 0;
                        
                        Result[i] = F[i] | (C[i] & B1[i]);
                        Result[i] = Result[i] ^ A[i];  
                    }
                    
                    for (int i=0; i<32; i++,u++) {// Xor avec le message
                        
                        Result[i] = (Result[i] ^ m[u]);
                    }
                    
                    for (int l=31; l>=0; l--) {//Convertir en binat T[]
                        
                        if(t[p] > 0) {
                        
                            int residue = t[p] % 2;
                            t[p] = t[p] / 2;
                            T[l] = residue;
                            }
                        Result[l] = Result[l] ^ T[l];
                    }
                    p++;
                    for (int i=0,last=31; i<s[q]; i++,last--) {//Permutation <<< S
                        
                        int permut = Result[last];
                        Result[last] = Result[i];
                        Result[i] = permut;
                    }
                    q++;
                    for (int i=0; i<32; i++) {
                        Result[i] = Result[i] ^ B[i];
                    }
                    for (int ini=0; ini<32; ini++) {// initialisation A,B,C,D
                        A[ini] = D[ini];
                        //System.out.println("A " + A[ini]);
                        D[ini] = C[ini];
                        //System.out.println("D " + D[ini]);
                        C[ini] = B[ini];
                        //System.out.println("C " + C[ini]);
                        B[ini] = Result[ini];
                        //System.out.println("B " + B[ini]);
                    }
                }                   
                }
                if (rond == 2) {
                for(int iteration=0; iteration<16; iteration++) {
                    
                    for (int i=0; i<3; i++) {
                        
                        F[i] = B[i] ^ C[i];
                        
                        Result[i] = F[i] ^ D[i];
                        Result[i] = Result[i] ^ A[i];  
                    }
                    
                    for (int i=0; i<32; i++,u++) {// Xor avec le message
                        
                        Result[i] = (Result[i] ^ m[u]);
                    }
                    
                    for (int l=31; l>=0; l--) {//Convertir en binat T[]
                        
                        if(t[p] > 0) {
                        
                            int residue = t[p] % 2;
                            t[p] = t[p] / 2;
                            T[l] = residue;
                            }
                        Result[l] = Result[l] ^ T[l];
                    }
                    p++;
                    for (int i=0,last=31; i<s[q]; i++,last--) {//Permutation <<< S
                        
                        int permut = Result[last];
                        Result[last] = Result[i];
                        Result[i] = permut;
                    }
                    q++;
                    for (int i=0; i<32; i++) {
                        Result[i] = Result[i] ^ B[i];
                    }
                    for (int ini=0; ini<32; ini++) {// initialisation A,B,C,D
                        A[ini] = D[ini];
                        //System.out.println("A " + A[ini]);
                        D[ini] = C[ini];
                        //System.out.println("D " + D[ini]);
                        C[ini] = B[ini];
                        //System.out.println("C " + C[ini]);
                        B[ini] = Result[ini];
                        //System.out.println("B " + B[ini]);
                    }
                }                    
                }
                if (rond == 3) {
                for(int iteration=0; iteration<16; iteration++) {
                    
                    for (int i=0; i<3; i++) {
                
                        if (D[i] == 0)
                            B1[i] = 1;
                        else
                            B1[i] = 0;
                        
                        F[i] = (B[i] | B1[i]);
                        Result[i] = F[i] ^ C[i];
                        Result[i] = Result[i] ^ A[i];  
                    }
                    
                    for (int i=0; i<32; i++,u++) {// Xor avec le message
                        
                        Result[i] = (Result[i] ^ m[u]);
                    }
                    
                    for (int l=31; l>=0; l--) {//Convertir en binat T[]
                        
                        if(t[p] > 0) {
                        
                            int residue = t[p] % 2;
                            t[p] = t[p] / 2;
                            T[l] = residue;
                            }
                        Result[l] = Result[l] ^ T[l];
                    }
                    p++;
                    for (int i=0,last=31; i<s[q]; i++,last--) {//Permutation <<< S
                        
                        int permut = Result[last];
                        Result[last] = Result[i];
                        Result[i] = permut;
                    }
                    q++;
                    for (int i=0; i<32; i++) {
                        Result[i] = Result[i] ^ B[i];
                    }
                    for (int ini=0; ini<32; ini++) {// initialisation A,B,C,D
                        A[ini] = D[ini];
                       // System.out.println("A " + A[ini]);
                        D[ini] = C[ini];
                        //System.out.println("D " + D[ini]);
                        C[ini] = B[ini];
                        //System.out.println("C " + C[ini]);
                        B[ini] = Result[ini];
                        //System.out.println("B " + B[ini]);
                    }
                }                    
                }
            }
            String caractere = "",caractere1 = "",caractere2 = "",caractere3 = "";
            for (int i=0; i<32; i++) {
                A_final[i] = Integer.toString(A[i] ^ a0[i]);
                caractere = caractere + A_final[i];                
                B_final[i] = Integer.toString(B[i] ^ b0[i],16);
                caractere1 = caractere1 + B_final[i]; 
                C_final[i] = Integer.toString(C[i] ^ c0[i],16);
                caractere2 = caractere2 + C_final[i]; 
                D_final[i] = Integer.toString(D[i] ^ d0[i],16);
                caractere3 = caractere3 + D_final[i]; 
            }
            
            long decimal = 0;
            int len = caractere.length();
            for (int pow = (len-1); pow > -1; pow--) {
                if (caractere.charAt(pow)=='1'){
                decimal += (Math.pow(2, (len - pow - 1)));
                }
            }
            String hex1 = Test.decToHex((int) decimal);  
            
            len = caractere1.length();
            for (int pow = (len-1); pow > -1; pow--) {
                if (caractere1.charAt(pow)=='1'){
                decimal += (Math.pow(2, (len - pow - 1)));
                }
            }
            String hex2 = Test.decToHex((int) decimal); 
            
            len = caractere2.length();
            for (int pow = (len-1); pow > -1; pow--) {
                if (caractere2.charAt(pow)=='1'){
                decimal += (Math.pow(2, (len - pow - 1)));
                }
            }
            String hex3 = Test.decToHex((int) decimal); 
            
            len = caractere3.length();
            for (int pow = (len-1); pow > -1; pow--) {
                if (caractere3.charAt(pow)=='1'){
                decimal += (Math.pow(2, (len - pow - 1)));
                }
            }
            String hex4 = Test.decToHex((int) decimal); 
            
            String Final_Result = hex1+hex2+hex3+hex4;
            //System.out.println("Here is your encrypted message : ");
            //System.out.println(Final_Result);
            Crypt.setText(Final_Result);

    }//GEN-LAST:event_jButton1ActionPerformed

    public static void main(String args[]) {

        
        java.awt.EventQueue.invokeLater(() -> {
            new InterMd5().setVisible(true);
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTextPane Crypt;
    private javax.swing.JTextPane Message;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
